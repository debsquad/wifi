#!/usr/bin/env python3.4

"""
Manage Wifi access points.

Usage:
  wifi --add <alias> <nwid> [(<ip> <netmask> <gateway> <dns>)]
  wifi --delete <alias>
  wifi --connect <alias>
  wifi --list
  wifi --scan
  wifi --init
  wifi --help
  wifi --version

Options:
  -h --help      Show this screen.
  -v --version   Show version.
  -i --init      Initialize required files.
  -a --add       Add an access point.
  -d --delete    Delete ean access point.
  -c --connect   Connect to an access point.
  -l --list      List available access points.
  -s --scan      Show the results of an access point scan.
"""

from getpass import getpass
import ipaddress
import json
import os
import re
from subprocess import call, Popen, DEVNULL, PIPE
import stat

from docopt import docopt
import gnupg
import requests


# Config
basedir = os.path.expanduser('~/.wifi/')
pwdir = basedir + 'passwords/'
dbfile = basedir + 'access_points.json'
receipt = os.getlogin() + '@' + os.uname()[1]
myif = 'iwn0'  # Change this to fit your needs


def database(action):

    """ This function handles all database operations. """

    # Fetch database.
    with open(dbfile) as fp:
        db = json.load(fp)
    dbkeys = sorted(db.keys())

    # List available database entries and exit.
    if action == 'list':
        print('Available access points:')
        count = 0
        for i in range(len(db.keys())):
            print(str(count + 1) + ') ' + dbkeys[count])
            count += 1
        exit(0)

    # Lookup for an alias occurency in the database.
    try:
        is_valid = db[args['<alias>']]
        if args['--add']:
            print('Error: alias already registered')
            exit(1)
    except:
        if args['--connect'] or args['--delete']:
            print('Error: unknown alias')
            exit(1)

    # Return current entry values from database as a dict.
    if action == 'get_conf':
        return db[args['<alias>']]

    # Remove current entry from database.
    elif action == 'delete':
        del db[args['<alias>']]
        _save()

    # Add a new entry into database.
    elif action == 'add':
        newentry = {args['<alias>']: {'nwid': args['<nwid>']}}
        if args['<ip>']:
            for i in ['ip', 'netmask', 'gateway', 'dns']:
                newentry[args['<alias>']][i] = args['<' + i + '>']
        db.update(newentry)
        _save()

    def _save():
        """ This function writes changes to the database. """
        with open(dbfile, 'w') as fp:
            json.dump(db, fp, indent=4, sort_keys=True)


def password(action):

    """ This function handles password related operations. """

    gpg = gnupg.GPG(gnupghome=basedir)
    gpg.encoding = 'utf-8'

    # Generate a new GnuPG private key.
    if action == 'genkey':
        try:
            pprompt = lambda: (
                getpass('Master password: '),
                getpass('Retype password: ')
            )
            master, master2 = pprompt()
            while master != master2:
                print('Passwords do not match. Try again')
                master, master2 = pprompt()
        except KeyboardInterrupt:
            print()
            exit()

        input_data = gpg.gen_key_input(
            key_length=4096, name_email=receipt, passphrase=master)
        key = gpg.gen_key(input_data)

    # Encrypt a password.
    elif action == 'add':
        try:
            passwd = getpass('Password: ')
        except KeyboardInterrupt:
            print()
            exit()

        gpg.encrypt(passwd, receipt, output=pwdir + args['<alias>'] + '.gpg')

    # Decrypt a password.
    elif action == 'decrypt':
        try:
            master = getpass('Master Password: ')
        except KeyboardInterrupt:
            print()
            exit()

        with open(pwdir + args['<alias>'] + '.gpg', 'rb') as fp:
            passwd = str(gpg.decrypt_file(fp, passphrase=master))

        if not passwd:
            print("Invalid master password")
            exit()
        else:
            return passwd

    # Delete a password.
    elif action == 'delete':
        os.remove(pwdir + args['<alias>'] + '.gpg')


def init():

    """ Create and install all required components (one-time) """

    try:
        os.makedirs(pwdir, stat.S_IRWXU)
        print('Directory structure: done')
    except IOError:
        if os.path.isdir(pwdir):
            print('Error: components already initialized')
        else:
            print('Error: Directory structure: permission denied')
        exit(1)

    f = open(dbfile, 'w')
    f.write('{}')
    print('Database: done')

    passmgr = PasswordManager()
    passmgr.genkey()
    print('GnuPG: done')


def connect(ap, passwd):

    """ Connect to a wifi access point. """

    def cmd(command):
        call(command, stdout=DEVNULL, stderr=DEVNULL)

    # setup interface/route/dns
    cmd(["ifconfig", myif, "down"])
    cmd(['ifconfig', myif, 'nwid', ap['nwid'], 'wpakey', passwd])

    if len(ap) > 2:
        cmd(['ifconfig', myif, 'inet', ap['ip'], 'netmask', ap['netmask']])
        cmd(['route', 'delete', 'default'])
        cmd(['route', 'add', 'default', ap['gateway']])
        with open('/etc/resolv.conf', 'w') as fp:
            fp.write('nameserver ' + ap['dns'])
    else:
        cmd(['dhclient', myif])

    # restart firewall and flush rules
    cmd(["pfctl", "-d"])
    cmd(["pfctl", "-e", "-Fa", "-f/etc/pf.conf"])

    # check connectivity
    for i in range(10):
        try:
            r = requests.get('http://www.google.fr')
            print('Connected to {}'.format(ap['nwid']))
            break
        except:
            if i == 9:
                print('Error: timeout')


def scan(count=1):

    """ Scan wifi networks. """

    results = Popen("ifconfig " + myif + " scan", stdout=PIPE, shell=True)

    for i in str(results.stdout.read(), 'utf-8').split('\n'):
        if re.match("^nwid", i.strip()):
            i = i.split(' chan')
            att = i[1].split(' ')[4]
            nwid = i[0].strip().replace('nwid ', '')

            if nwid == '""':
                nwid = '_unknown'

            print(str(count) + ') ' + nwid + ' (' + att + ')')
            count += 1


def check_args():

    """ Arguments extra checks. """

    if args['<ip>']:
        try:
            for i in [args['<ip>'], args['<netmask>'], args['<dns>']]:
                ipaddress.ip_address(i)
            try:
                ipaddress.ip_address(args['gateway'])
            except:
                if args['<gateway>'][-1] == ".":
                    args['<gateway>'] = args['<gateway>'][:-1]
                vh = re.compile("(?![-\.])[A-Za-z\d\.-]{1,63}(?<!-)$")
                if not re.match(vh, args['<gateway>']) or \
                    len(args['<gateway>']) > 255:
                    raise
        except:
            print('Error: invalid network configuration')
            exit(1)

    elif (args['--connect'] or args['--scan']) and os.getenv('USER') != 'root':
        print('Error: this command should be run as root')
        exit(1)


def main():

    """ Main function. """

    check_args()

    if args['--init']:
        init()
    elif args['--scan']:
        scan()
    elif args['--list']:
        database('list')
    elif args['--connect']:
        connect(database('get_conf'), password('decrypt'))
    elif args['--add']:
        database('add')
        password('add')
    elif args['--delete']:
        database('delete')
        password('delete')


if __name__ == "__main__":
    args = docopt(__doc__, version='wifi 0.2')
    main()
