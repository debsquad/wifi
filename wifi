#!/usr/bin/env python3.4

"""
Manage Wifi access points.

Usage:
  wifi --add <alias> <nwid> [(<ip> <netmask> <gateway> <dns>)]
  wifi --delete <alias>
  wifi --connect (--auto | <alias>)
  wifi --list
  wifi --scan
  wifi --init
  wifi --help
  wifi --version

Options:
  -h --help      Show this screen.
  -v --version   Show version.
  -a --add       Add an access point.
  -c --connect   Connect to an access point.
  -d --delete    Delete an access point.
  -i --init      Initialize required files.
  -l --list      List available access points.
  -s --scan      Show the results of an access point scan.
  -A --auto      Auto-select nearest known access point.
"""

from getpass import getpass
import ipaddress
import json
import os
import re
from subprocess import call, Popen, DEVNULL, PIPE
import stat

from docopt import docopt
import gnupg
import requests


# Config
basedir = os.path.expanduser('~/.wifi/')
pwdir = basedir + 'passwords/'
dbfile = basedir + 'access_points.json'
receipt = os.getlogin() + '@' + os.uname()[1]
myif = 'iwn0'  # Change this to fit your needs


def database(action):
    """ This function handles all database operations. """
    # Create database.
    if action == 'create':
        f = open(dbfile, 'w')
        f.write('{}')
        return

    # Open database and store it as an object.
    with open(dbfile) as f:
        db = json.load(f)
        dbkeys = sorted(db.keys())

    # Return current entry associated values as a dict.
    if action == 'get_entry':
        if args['--auto']:
            # Any scan result matching our database entries?
            scan_results = scan('fetch')
            for i in scan_results:
                for alias in db.keys():
                    if i[0] == db[alias]['nwid']:
                        args['<alias>'] = alias

            if not args['<alias>']:
                print('No available access point.')
                exit()

        return db[args['<alias>']]

    # List available database entries and exit.
    if action == 'list':
        print('{} saved access points:'.format(str(len(dbkeys))))
        for i in range(len(db)):
            print('{} ({})'.format(dbkeys[i], db[dbkeys[i]]['nwid']))
        return

    # Lookup for an alias occurency in the database.
    try:
        is_valid = db[args['<alias>']]
        if args['--add']:
            print('Error: alias already registered')
            exit(1)
    except:
        if args['--connect'] or args['--delete']:
            print('Error: unknown alias')
            exit(1)

    def _save():
        """ This function writes changes to the database. """
        with open(dbfile, 'w') as f:
            json.dump(db, f, indent=4, sort_keys=True)

    # Remove current entry from database.
    if action == 'delete':
        del db[args['<alias>']]
        _save()

    # Add a new entry into database.
    if action == 'add':
        newentry = {args['<alias>']: {'nwid': args['<nwid>']}}
        if args['<ip>']:
            for i in ['ip', 'netmask', 'gateway', 'dns']:
                newentry[args['<alias>']][i] = args['<' + i + '>']
        db.update(newentry)
        _save()


def password(action):

    """ This function handles password related operations. """

    gpg = gnupg.GPG(gnupghome=basedir)
    gpg.encoding = 'utf-8'

    # Generate a new GnuPG private key.
    if action == 'genkey':
        try:
            pprompt = lambda: (
                getpass('Master password: '),
                getpass('Retype password: ')
            )
            master, master2 = pprompt()
            while master != master2:
                print('Passwords do not match. Try again')
                master, master2 = pprompt()

            gpg.gen_key(gpg.gen_key_input(
                key_length=4096, name_email=receipt, passphrase=master))
        except KeyboardInterrupt:
            print()
            exit()

    # Encrypt a password.
    if action == 'add':
        try:
            pw = getpass('Password: ')
            gpg.encrypt(pw, receipt, output=pwdir + args['<alias>'] + '.gpg')
        except KeyboardInterrupt:
            print()
            exit()

    # Decrypt a password.
    if action == 'decrypt':
        try:
            master = getpass('Master Password: ')
        except KeyboardInterrupt:
            print()
            exit()

        with open(pwdir + args['<alias>'] + '.gpg', 'rb') as f:
            pw = str(gpg.decrypt_file(f, passphrase=master))

        if not pw:
            print("Invalid master password")
            exit()
        else:
            return pw

    # Delete a password.
    if action == 'delete':
        os.remove(pwdir + args['<alias>'] + '.gpg')


def init():

    """ Create and install all required components (one-time) """

    try:
        os.makedirs(pwdir, stat.S_IRWXU)
        print('Directory structure: done')
    except IOError:
        if os.path.isdir(pwdir):
            print('Error: components already initialized')
        else:
            print('Error: permission denied')
        exit(1)

    database('create')
    print('Database: done')

    password('genkey')
    print('GnuPG: done')


def connect():

    """ Connect to a wifi access point. """

    ap = database('get_entry')
    passwd = password('decrypt')

    def cmd(command):
        call(command, stdout=DEVNULL, stderr=DEVNULL)

    # setup interface/route/dns
    cmd(["ifconfig", myif, "down"])
    cmd(['ifconfig', myif, 'nwid', ap['nwid'], 'wpakey', passwd])

    if len(ap) > 2:
        cmd(['ifconfig', myif, 'inet', ap['ip'], 'netmask', ap['netmask']])
        cmd(['route', 'delete', 'default'])
        cmd(['route', 'add', 'default', ap['gateway']])
        with open('/etc/resolv.conf', 'w') as f:
            f.write('nameserver ' + ap['dns'])
    else:
        cmd(['dhclient', myif])

    # restart firewall and flush rules
    cmd(["pfctl", "-d"])
    cmd(["pfctl", "-e", "-Fa", "-f/etc/pf.conf"])

    # check connectivity
    for count in range(15):
        try:
            r = requests.get('http://www.google.fr')
            print('Connected to {}.'.format(ap['nwid']))
            break
        except:
            if count == 14:
                print('Error: timeout')


def scan(action=''):

    """ Scan wifi networks. """

    results = Popen("ifconfig " + myif + " scan", stdout=PIPE, shell=True)
    ap_list = []

    for i in str(results.stdout.read(), 'utf-8').split('\n'):
        if re.match("^nwid", i.strip()):
            i = i.replace('"', '').split(' chan')
            nwid = i[0].replace('nwid', '').strip()
            if not nwid:
                nwid = 'unknown'
            ap_list.append((nwid, i[1].split(' ')[4]))

    sorted_list = sorted(ap_list, key=lambda ap: ap[1], reverse=True)

    # If we're lost in a desert, exit.
    if not ap_list:
        print('Scan ends with no result.')
        exit(0)

    # Process action.
    if action == 'fetch':
        return ap_list
    else:
        print('{} available access points:'.format(str(len(sorted_list))))
        for i in sorted_list:
            print(i[0] + ' (' + i[1] + ')')


def check_args():

    """ Arguments extra checks. """

    if args['<ip>']:
        try:
            for i in [args['<ip>'], args['<netmask>'], args['<dns>']]:
                ipaddress.ip_address(i)
            try:
                ipaddress.ip_address(args['gateway'])
            except:
                if args['<gateway>'][-1] == ".":
                    args['<gateway>'] = args['<gateway>'][:-1]

                valid_host = re.compile("(?![-\.])[A-Za-z\d\.-]{1,63}(?<!-)$")
                if not re.match(valid_host, args['<gateway>']) or \
                   len(args['<gateway>']) > 255:
                    raise
        except:
            print('Error: invalid network configuration')
            exit(1)

    elif (args['--connect'] or args['--scan']) and os.getenv('USER') != 'root':
        print('Error: this command should be run as root')
        exit(1)


def main():

    """ Main function. """

    if args['--init']:
        init()
    elif args['--scan']:
        scan()
    elif args['--connect']:
        connect()
    elif args['--list']:
        database('list')
    elif args['--add']:
        database('add')
        password('add')
    elif args['--delete']:
        database('delete')
        password('delete')


if __name__ == "__main__":
    args = docopt(__doc__, version='wifi 0.2')
    check_args()
    main()
