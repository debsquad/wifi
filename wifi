#!/usr/bin/env python3.4

"""
Manage Wifi access points.

Usage:
  wifi --add <alias> <nwid> [(<ip> <netmask> <gateway> <dns>)]
  wifi --delete <alias>
  wifi --connect <alias>
  wifi --list
  wifi --scan
  wifi --init
  wifi --help
  wifi --version

Options:
  -h --help      Show this screen.
  -v --version   Show version.
  -i --init      Initialize required files.
  -a --add       Add an access point.
  -d --delete    Delete ean access point.
  -c --connect   Connect to an access point.
  -l --list      List available access points.
  -s --scan      Show the results of an access point scan.
"""

from getpass import getpass
import ipaddress
import json
import os
import re
from subprocess import call, Popen, DEVNULL, PIPE
import stat

from docopt import docopt
import gnupg
import requests


# Config
basedir = os.path.expanduser('~/.wifi/')
pwdir = basedir + 'passwords/'
dbfile = basedir + 'access_points.json'
receipt = os.getlogin() + '@' + os.uname()[1]
myif = 'iwn0'  # Change this to fit your needs


def init_components():

    """ Create and install all required components (one-time) """

    try:
        os.makedirs(pwdir, stat.S_IRWXU)
        print('Directory structure: done')
    except IOError:
        if os.path.isdir(pwdir):
            print('Error: components already initialized')
        else:
            print('Error: Directory structure: permission denied')
        exit(1)

    f = open(dbfile, 'w')
    f.write('{}')
    print('Database: done')

    passmgr = PasswordManager()
    passmgr.genkey()
    print('GnuPG: done')


def connect(passwd, ap):

    """ Connect to a wifi access point. """

    if os.getenv('USER') != 'root':
        print('Error: --connect should be run as root')
        exit(1)

    def cmd(command):
        call(command, stdout=DEVNULL, stderr=DEVNULL)

    # setup interface/route/dns
    cmd(["ifconfig", myif, "down"])
    cmd(['ifconfig', myif, 'nwid', ap['nwid'], 'wpakey', passwd])

    if len(ap) > 2:
        cmd(['ifconfig', myif, 'inet', ap['ip'], 'netmask', ap['netmask']])
        cmd(['route', 'delete', 'default'])
        cmd(['route', 'add', 'default', ap['gateway']])
        with open('/etc/resolv.conf', 'w') as fp:
            fp.write('nameserver ' + ap['dns'])
    else:
        cmd(['dhclient', myif])

    # restart firewall and flush rules
    cmd(["pfctl", "-d"])
    cmd(["pfctl", "-e", "-Fa", "-f/etc/pf.conf"])

    # check connectivity
    for i in range(10):
        try:
            r = requests.get('http://www.google.fr')
            print('Connected to {}'.format(ap['nwid']))
            break
        except:
            if i == 9:
                print('Error: timeout')


def scan(count=1):

    """ Scan wifi networks. """

    results = Popen("ifconfig " + myif + " scan", stdout=PIPE, shell=True)
    results = str(results.stdout.read(), 'utf-8').split('\n')

    for i in results:
        if re.match("^nwid", i.strip()):
            i = i.split(' chan')
            att = i[1].split(' ')[4]
            nwid = i[0].strip().replace('nwid ', '')
            if nwid == '""':
                nwid = '_unknown'
            print(str(count) + ') ' + nwid + ' (' + att + ')')
            count += 1


class PasswordManager(object):

    """ This class handles password related operations. """

    def __init__(self):
        self.gpg = gnupg.GPG(gnupghome=basedir)
        self.gpg.encoding = 'utf-8'

        try:
            if args['--add']:
                self.passwd = getpass('Password: ')
            elif args['--connect']:
                self.master = getpass('Master Password: ')
            elif args['--init']:
                pprompt = lambda: (
                    getpass('Master password: '),
                    getpass('Retype password: ')
                )
                self.master, master2 = pprompt()
                while self.master != master2:
                    print('Passwords do not match. Try again')
                    self.master, master2 = pprompt()
        except KeyboardInterrupt:
            print()
            exit()

    def genkey(self):
        """ Generate a new GnuPG private key. """
        input_data = self.gpg.gen_key_input(
            key_length=4096, name_email=receipt, passphrase=self.master)
        key = self.gpg.gen_key(input_data)

    def encrypt(self):
        """ Encrypt a password. """
        self.gpg.encrypt(
            self.passwd, receipt, output=pwdir + args['<alias>'] + '.gpg')

    def decrypt(self):
        """ Decrypt a password. """
        with open(pwdir + args['<alias>'] + '.gpg', 'rb') as fp:
            self.passwd = str(self.gpg.decrypt_file(fp, passphrase=self.master))
        if not self.passwd:
            print("Invalid master password")
            exit()

    def delete(self):
        """ Delete a password. """
        os.remove(pwdir + args['<alias>'] + '.gpg')


class DatabaseManager(object):

    """ This class handles all database operations. """

    def __init__(self):
        with open(dbfile) as fp:
            self.db = json.load(fp)
        self.dbkeys = sorted(self.db.keys())

    def list_entries(self, count=0):
        """ List available database entries. """
        print('Available access points:')
        for i in range(len(self.db.keys())):
            print(str(count + 1) + ') ' + self.dbkeys[count])
            count += 1

    def check(self, registered=False):
        """ Lookup for valid entry in database. """
        try:
            self.db[args['<alias>']]
            registered = True
        except:
                pass

        if args['--add'] and registered:
            print('Error: access point with same alias already registered')
            exit(1)

        if (args['--connect'] or args['--delete']) and not registered:
            print('Error: unknown access point')
            exit(1)

    def get_entry(self):
        """ Fetch configuration associatied to an alias. """
        return self.db[args['<alias>']]

    def save(self):
        """ Remove or add a database entry. """
        if args['--delete']:
            del self.db[args['<alias>']]
        elif args['--add']:
            newentry = {args['<alias>']: {'nwid': args['<nwid>']}}
            if args['<ip>']:
                for i in ['ip', 'netmask', 'gateway', 'dns']:
                    newentry[args['<alias>']][i] = args['<' + i + '>']
            self.db.update(newentry)
        with open(dbfile, 'w') as fp:
            json.dump(self.db, fp, indent=4, sort_keys=True)
        print('Done')


def main():

    """ Main function. """

    if args['--init']:
        init_components()
    elif args['--scan']:
        scan()
    elif args['--list']:
        db = DatabaseManager()
        db.list_entries()
    else:
        db = DatabaseManager()
        passmgr = PasswordManager()
        db.check()

        if args['--connect']:
            passmgr.decrypt()
            connect(passmgr.passwd, db.get_entry())
        elif args['--add']:
            passmgr.encrypt()
            db.save()
        elif args['--delete']:
            db.check()
            passmgr.delete()
            db.save()


if __name__ == "__main__":
    args = docopt(__doc__, version='wifi 0.2')
    if args['<ip>']:
        try:
            for i in [args['<ip>'], args['<netmask>'], args['<dns>']]:
                ipaddress.ip_address(i)
            try:
                ipaddress.ip_address(args['gateway'])
            except:
                if args['<gateway>'][-1] == ".":
                    args['<gateway>'] = args['<gateway>'][:-1]
                vh = re.compile("(?![-\.])[A-Za-z\d\.-]{1,63}(?<!-)$")
                if not re.match(vh, args['<gateway>']) or \
                    len(args['<gateway>']) > 255:
                    raise
        except:
            print('Error: invalid network configuration')
            exit(1)
    if (args['--connect'] or args['--scan']) and os.getenv('USER') != 'root':
        print('Error: this command should be run as root')
        exit(1)

    main()
