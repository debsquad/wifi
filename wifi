#!/usr/bin/env python3.4

"""
wifi 1.2
Minimal and secure wifi network manager.

FEATURES:

 * Connect to a list of predefined networks
 * Add or delete networks
 * List available networks
 * Password encryption via GnuPG
 * Aliases (for quick use)
 * Scan for available AP

See -h for help.
"""

import argparse
from getpass import getpass
from ipaddress import IPv4Address
import json
import os
import re
import subprocess
import stat
import sys

import gnupg
import requests


def parse_conf():
    """ Return config file values """
    conf = {
        'basedir' : os.path.expanduser('~/.wifi/'),
        'dbfile'  : os.path.expanduser('~/.wifi/access_points.db'),
        'pwdir'   : os.path.expanduser('~/.wifi/passwords/'),
        'id'      : os.getlogin() + '@' + os.uname()[1],
        'if'      : 'iwn0' # modify this to fit your needs
    }
    return conf


def init_components(conf):
    """ Create and install all required components (one-time) """
    try:
        os.makedirs(conf['pwdir'], stat.S_IRWXU)
        print('Directory structure: done')
    except:
        print('Directory structure: permission denied')
        sys.exit(1)
    try:
        f = open(conf['dbfile'], 'w')
        f.write('{}')
        print('Database: done')
    except:
        print('Database: permission denied')
        sys.exit(1)
    try:
        passmgr = PasswordManager(conf)
        passmgr.genkey()
        print('GnuPG: done')
    except:
        print('GnuPG: failed')


def connect(passwd, interface):
    """ Connect to a wifi access point. """
    def cmd(command):
        subprocess.call(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # setup interface/route/dns
    cmd(["ifconfig", interface, "down"])
    cmd(['ifconfig', interface, 'nwid', sys.argv[2], 'wpakey', passwd])

    if len(sys.argv) == 4:
        cmd(['ifconfig', interface, 'inet', sys.argv[3], 'netmask', sys.argv[4]])
        cmd(['route', 'add', 'default', sys.argv[5]])
        with open('/etc/resolv.conf', 'w') as fp:
            fp.write('nameserver 8.8.8.8')
    else:
        cmd(['dhclient', interface])

    # restart firewall and flush rules
    cmd(["pfctl", "-d"])
    cmd(["pfctl", "-e", "-Fa", "-f/etc/pf.conf"])

    # check connectivity
    for i in range(10):
        try:
            r = requests.get('http://www.google.fr')
            print('Connected to {}'.format(sys.argv[2]))
            break
        except:
            if i == 9:
                print('Error: timeout')


def scan(interface):
    """ Scan wifi networks. """
    # have to ifconfig down because of a bug in iwn driver on OpenBSD 5.6
    # hopefully that will be fixed on 5.7
    # if you dont need this, just comment the line below
    subprocess.call(["ifconfig", interface, "down"])
    results = subprocess.Popen("ifconfig iwn0 scan", stdout=subprocess.PIPE, shell=True)
    results = str(results.stdout.read(), 'utf-8').split('\n')

    for i in results:
        if re.match("^nwid", i.strip()):
            i = i.split(' chan')
            att = i[1].split(' ')[4]
            nwid = i[0].strip().replace('nwid ', '')
            if nwid == '""':
                nwid = '_unknown'
            print(nwid + ' (' + att + ')')


class PasswordManager(object):

    """
    This class handles password related operations.
    """

    def __init__(self, conf):
        self.conf = conf
        self.private = self.conf['pwdir']
        self.gpg = gnupg.GPG(gnupghome=self.conf['basedir'])
        self.gpg.encoding = 'utf-8'
        self._prompt()

    def _prompt(self):
        """ Prompt for password """
        if sys.argv[1] == 'add':
            self.passwd = getpass('Password: ')
        elif sys.argv[1] == 'connect':
            self.master = getpass('Master Password: ')
        elif sys.argv[1] == 'init':
            pprompt = lambda: (getpass('Master password: '), getpass('Retype password: '))
            self.master, master2 = pprompt()
            while self.master != master2:
                print('Passwords do not match. Try again')
                self.master, master2 = pprompt()

    def encrypt(self):
        """ Encrypt a password """
        self.passwd = self.gpg.encrypt(self.passwd, self.conf['id'])
        self.passwd = str(self.passwd)
        with open(self.private + sys.argv[2] + '.gpg', 'w') as fp:
            fp.write(self.passwd)

    def decrypt(self, passwd=''):
        """ Decrypt a password """
        for i in open(self.private + sys.argv[2] + '.gpg'):
            passwd += i
        self.passwd = self.gpg.decrypt(passwd, passphrase=self.master)
        self.passwd = str(self.passwd)

    def delete(self):
        """ delete a password """
        os.remove(self.private + sys.argv[2] + '.gpg')

    def genkey(self):
        input_data = self.gpg.gen_key_input(key_length=2048,
            name_email=self.conf['id'], passphrase=self.master)
        key = self.gpg.gen_key(input_data)


class DatabaseManager(object):

    """
    This class handles all database operations.
    """

    def __init__(self, dbfile):
        with open(dbfile) as fp:
            self.db = json.load(fp)
        self.dbkeys = sorted(self.db.keys())
        self.dbfile = dbfile

    def show(self, count=0):
        """ Show database entries. """
        print('Available access points:')
        for i in range(len(self.db.keys())):
            print(str(count + 1) + ') ' + self.dbkeys[count])
            count += 1

    def check(self):
        """ Lookup for valid entry in database. """
        self.registered = False
        try:
            self.db[sys.argv[2]]
            self.registered = True
        except:
            try:
                if int(sys.argv[2]) <= len(self.db.keys()):
                    sys.argv[2] = self.dbkeys[int(sys.argv[2])]
                    self.registered = True
            except:
                pass

        if sys.argv[1] == 'add' and self.registered:
            print('Error: access point already registered')
            sys.exit(1)

        if (sys.argv[1] == 'connect' or sys.argv[1] == 'delete') \
                and not self.registered:
            print('Error: unknown access point')
            sys.exit(1)

    def save(self, count=3):
        """ Remove or add a database entry. """
        if self.registered:
            del self.db[sys.argv[2]]
        else:
            newentry = { sys.argv[2]: {} }
            for i in ['ip', 'netmask', 'gateway']:
                try:
                    newentry[sys.argv[2]][i] = sys.argv[count]
                except:
                    pass
                count += 1
            self.db.update(newentry)
        with open(self.dbfile, 'w') as fp:
            json.dump(self.db, fp, indent=4)
        print('Done')


def main():
    # Argparse
    parser = argparse.ArgumentParser(prog='wifi', description='Securely manage wifi access points')
    parser.add_argument('-v', '--version', action='version', version='%(prog)s 1.1')

    subparsers = parser.add_subparsers(dest='action')
    subparsers.required = True

    p_a = subparsers.add_parser('add', help='add an access point')
    p_a.add_argument('nwid', help='access point id')
    p_a.add_argument('ip', nargs='?', help='ipv4 address', default=False)
    p_a.add_argument('netmask', nargs='?', help='netmask', default=False)
    p_a.add_argument('gateway', nargs='?', help='gateway', default=False)

    p_b = subparsers.add_parser('connect', help='connect to an access point')
    p_b.add_argument('nwid', help='connect to an access point')

    p_c = subparsers.add_parser('delete', help='delete an access point')
    p_c.add_argument('nwid', help='delete an access point')

    p_d = subparsers.add_parser('init', help='init user config files')
    p_d.add_argument('init', action='store_const', const='init',
        help='install config files (default: ~/.wifi) \
        and create GnuPG key for password encryption')

    p_e = subparsers.add_parser('list', help='list saved access points')
    p_e.add_argument('list', action='store_const', const='list',
        help='list available access points')

    p_f = subparsers.add_parser('scan', help='scan for available access points')
    p_f.add_argument('scan', action='store_const', const='list',
        help='scan for available access points')

    args = parser.parse_args()

    # verify args
    if len(sys.argv) > 3:
        if not args.netmask:
            parser.error('the following arguments are required: netmask gateway')
        elif not args.gateway:
            parser.error('the following arguments are required: gateway')
        try:
            IPv4Address(sys.argv[3])
            IPv4Address(sys.argv[4])
            if not re.match("^[\.A-Za-z0-9_-]*$", sys.argv[5]):
                raise
        except:
            parser.error('invalid network configuration')

    # load conf
    conf = parse_conf()

    # process arguments
    if sys.argv[1] == 'init':
        init_components(conf)
        sys.exit(0)
    elif sys.argv[1] == 'scan':
        scan(conf['if'])
        sys.exit(0)
    try:
        db = DatabaseManager(conf['dbfile'])
        passmgr = PasswordManager(conf)

        if sys.argv[1] == 'list':
            db.show()
        elif sys.argv[1] == 'connect':
            db.check()
            passmgr.decrypt()
            connect(passmgr.passwd, conf['if'])
        elif sys.argv[1] == 'add':
            db.check()
            passmgr.encrypt()
            db.save()
        elif sys.argv[1] == 'delete':
            db.check()
            passmgr.delete()
            db.save()
    except KeyboardInterrupt:
        print()
        sys.exit()


if __name__ == "__main__":
    main()
