#!/usr/bin/env python3.4

"""
Manage Wifi access points.

Usage:
  wifi --add <nwid> [(<ip> <netmask> <gateway> <dns>)]
  wifi --delete <nwid>
  wifi --connect <nwid>
  wifi --list
  wifi --scan
  wifi --init
  wifi --help
  wifi --version

Options:
  -h --help      Show this screen.
  -v --version   Show version.
  -a --add       Add an access point.
  -d --delete    Delete ean access point.
  -c --connect   Connect to an access point.
  -l --list      List available access points.
"""

from getpass import getpass
import ipaddress
import json
import os
import re
import subprocess
import stat

from docopt import docopt
import gnupg
import requests


conf = {
    'basedir': os.path.expanduser('~/.wifi/'),
    'dbfile': os.path.expanduser('~/.wifi/access_points.db'),
    'pwdir': os.path.expanduser('~/.wifi/passwords/'),
    'id': os.getlogin() + '@' + os.uname()[1],
    'if': 'iwn0'  # modify this to fit your needs
}


def init_components():
    """ Create and install all required components (one-time) """
    try:
        os.makedirs(conf['pwdir'], stat.S_IRWXU)
        print('Directory structure: done')
    except:
        print('Directory structure: permission denied')
        exit(1)
    try:
        f = open(conf['dbfile'], 'w')
        f.write('{}')
        print('Database: done')
    except:
        print('Database: permission denied')
        exit(1)
    try:
        passmgr = PasswordManager(conf)
        passmgr.genkey()
        print('GnuPG: done')
    except:
        print('GnuPG: failed')


def connect(passwd, nconf):
    """ Connect to a wifi access point. """
    def cmd(command):
        subprocess.call(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    # setup interface/route/dns
    cmd(["ifconfig", interface, "down"])
    cmd(['ifconfig', interface, 'nwid', args['<nwid>'], 'wpakey', passwd])

    if nconf['ip']:
        cmd(['ifconfig', interface, 'inet', nconf['ip'], 'netmask', nconf['netmask']])
        cmd(['route', 'add', 'default', nconf['gateway']])
        with open('/etc/resolv.conf', 'w') as fp:
            fp.write(nconf['dns'])
    else:
        cmd(['dhclient', interface])

    # restart firewall and flush rules
    cmd(["pfctl", "-d"])
    cmd(["pfctl", "-e", "-Fa", "-f/etc/pf.conf"])

    # check connectivity
    for i in range(10):
        try:
            r = requests.get('http://www.google.fr')
            print('Connected to {}'.format(args['<nwid>']))
            break
        except:
            if i == 9:
                print('Error: timeout')


def scan(interface):
    """ Scan wifi networks. """
    # have to ifconfig down because of a bug in iwn driver on OpenBSD 5.6
    # hopefully that will be fixed on 5.7
    # if you dont need this, just comment the line below
    subprocess.call(["ifconfig", interface, "down"])
    results = subprocess.Popen("ifconfig iwn0 scan", stdout=subprocess.PIPE, shell=True)
    results = str(results.stdout.read(), 'utf-8').split('\n')

    for i in results:
        if re.match("^nwid", i.strip()):
            i = i.split(' chan')
            att = i[1].split(' ')[4]
            nwid = i[0].strip().replace('nwid ', '')
            if nwid == '""':
                nwid = '_unknown'
            print(nwid + ' (' + att + ')')


class PasswordManager(object):

    """
    This class handles password related operations.
    """

    def __init__(self):
        self.gpg = gnupg.GPG(gnupghome=conf['basedir'])
        self.gpg.encoding = 'utf-8'
        self._prompt()

    def _prompt(self):
        """ Prompt for password """
        if args['--add']:
            self.passwd = getpass('Password: ')
        elif args['--connect']:
            self.master = getpass('Master Password: ')
        elif args['--init']:
            pprompt = lambda: (getpass('Master password: '), getpass('Retype password: '))
            self.master, master2 = pprompt()
            while self.master != master2:
                print('Passwords do not match. Try again')
                self.master, master2 = pprompt()

    def encrypt(self):
        """ Encrypt a password """
        self.passwd = self.gpg.encrypt(self.passwd, conf['id'])
        self.passwd = str(self.passwd)
        with open(conf['pwdir'] + args['<nwid>'] + '.gpg', 'w') as fp:
            fp.write(self.passwd)

    def decrypt(self, passwd=''):
        """ Decrypt a password """
        for i in open(self.private + args['<nwid>'] + '.gpg'):
            passwd += i
        self.passwd = self.gpg.decrypt(passwd, passphrase=self.master)
        self.passwd = str(self.passwd)

    def delete(self):
        """ delete a password """
        os.remove(self.private + args['<nwid>'] + '.gpg')

    def genkey(self):
        input_data = self.gpg.gen_key_input(key_length=2048,
           name_email=conf['id'], passphrase=self.master)
        key = self.gpg.gen_key(input_data)


class DatabaseManager(object):

    """
    This class handles all database operations.
    """

    def __init__(self, dbfile):
        with open(dbfile) as fp:
            self.db = json.load(fp)
        self.dbkeys = sorted(self.db.keys())
        self.dbfile = dbfile

    def list_entries(self, count=0):
        """ List available database entries. """
        print('Available access points:')
        for i in range(len(self.db.keys())):
            print(str(count + 1) + ') ' + self.dbkeys[count])
            count += 1

    def check(self, registered=False):
        """ Lookup for valid entry in database. """
        try:
            self.db[args['<nwid>']]
            registered = True
        except:
            try:
                if int(args['<nwid>']) <= len(self.db.keys()):
                    args['<nwid>'] = self.dbkeys[int(args['<nwid>'])]
                    registered = True
            except:
                pass

        if args['--add'] and registered:
            print('Error: access point already registered')
            exit(1)

        if (args['--connect'] or args['--delete']) and not registered:
            print('Error: unknown access point')
            exit(1)

    def get_entry(self):
        return self.db[args['<nwid>']]

    def save(self, count=3):
        """ Remove or add a database entry. """
        if args['--delete']:
            del self.db[args['<nwid>']]
        elif args['--add']:
            newentry = {args['<nwid>']: {}}
            if args['<ip>']:
                for i in ['ip', 'netmask', 'gateway', 'dns']:
                    newentry[args['<nwid>']][i] = args['<' + i + '>']
            self.db.update(newentry)
        with open(self.dbfile, 'w') as fp:
            json.dump(self.db, fp, indent=4)
        print('Done')


def main():
    # verify args
    if args['<ip>']:
        try:
            for i in [args['<ip>'], args['<netmask>'], args['<dns>']]:
                ipaddress.ip_address(i)
            if not re.match("^[\.A-Za-z0-9_-]*$", args['<gateway>']):
                raise
        except:
            print('Error: invalid network configuration')
            exit(1)

    # Core
    if args['--init']:
        init_components()
    elif args['--scan']:
        scan()
    elif args['--list']:
        db = DatabaseManager()
        db.list_entries()
    else:
        db = DatabaseManager()
        passmgr = PasswordManager()
        db.check()

        if args['--connect']:
            passmgr.decrypt()
            connect(passmgr.passwd, db.get_entry())
        elif args['--add']:
            passmgr.encrypt()
            db.save()
        elif args['--delete']:
            db.check()
            passmgr.delete()
            db.save()


if __name__ == "__main__":
    args = docopt(__doc__, version='wifi 0.2')
    main()
